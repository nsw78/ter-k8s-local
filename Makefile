#############################################
# Vari√°veis Globais
#############################################

# Nome completo da imagem Docker (incluindo namespace Docker Hub)
IMAGE_NAME=nswit/client-api

# Namespace do Kubernetes para isolar a aplica√ß√£o
NAMESPACE=local-api

#############################################
# Alvos principais para Build, Push e Deploy
#############################################

# Constr√≥i a imagem Docker localmente
build:
	cd api/app && docker build -t $(IMAGE_NAME):latest .

# Realiza o push da imagem para o Docker Hub
push:
	docker push $(IMAGE_NAME):latest

# Cria namespace (caso n√£o exista) e aplica os manifests no Kubernetes
api-up:
	- kubectl create namespace $(NAMESPACE) || echo "Namespace j√° existe"
	kubectl apply -f kubernetes/ -n $(NAMESPACE)

# Remove os manifests aplicados no Kubernetes
api-down:
	- kubectl delete -f kubernetes/ -n $(NAMESPACE) || echo "Manifestos j√° removidos ou n√£o existem"

# Aplica a infraestrutura via Terraform
apply:
	cd terraform && terraform init && terraform apply -auto-approve

# Destroi a infraestrutura via Terraform
destroy:
	cd terraform && terraform destroy -auto-approve

# Executa pipeline completa: builda, faz push da imagem e aplica no Kubernetes
all: build push api-up

#############################################
# üìö Instru√ß√µes r√°pidas:
#
# make build     ‚Üí builda a imagem local
# make push      ‚Üí envia a imagem para Docker Hub
# make api-up    ‚Üí cria namespace (se necess√°rio) e aplica manifests
# make api-down  ‚Üí remove deployment e servi√ßo no Kubernetes
# make apply     ‚Üí cria infraestrutura via Terraform
# make destroy   ‚Üí destr√≥i a infraestrutura via Terraform
# make all       ‚Üí builda imagem, faz push e aplica no Kubernetes
#############################################
